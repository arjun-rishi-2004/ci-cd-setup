name: Deploy Spring Boot with Docker to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual execution

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2️⃣ Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3️⃣ Grant execution permission for Gradle
      - name: Grant execute permission to Gradle
        run: chmod +x gradlew

      # 4️⃣ Build JAR file
      - name: Build JAR
        run: ./gradlew build -x test

      # 5️⃣ Generate Git Tag (Auto Increment Version)
      - name: Generate and Push Git Tag
        id: tag_version
        run: |
          # Get the latest tag (if any), else start with v1.0.0
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$latest_tag" ]]; then
            new_tag="v1.0.0"
          else
            major=$(echo $latest_tag | cut -d. -f1 | cut -d'v' -f2)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          fi

          # Create and push the new tag
          git tag $new_tag
          git push origin $new_tag

          echo "TAG_VERSION=$new_tag" >> $GITHUB_ENV

      # 6️⃣ Copy files to EC2
      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.jar, Dockerfile"
          target: "/home/${{ secrets.EC2_USER }}/app"

      # 7️⃣ Deploy on EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USER }}/app

            # Stop and remove existing container
            sudo docker stop myapp || true
            sudo docker rm myapp || true

            # Build Docker image with tag version
            sudo docker build -t myapp:${{ env.TAG_VERSION }} .

            # Run the new container
            sudo docker run -d --name myapp -p 8080:8080 myapp:${{ env.TAG_VERSION }}

            echo "Deployment completed for version ${{ env.TAG_VERSION }}"
