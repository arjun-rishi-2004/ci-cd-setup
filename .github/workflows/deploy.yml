name: Deploy Spring Boot App to EC2 or ECR

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment Target (ec2 or ecr)'
        required: true
        default: 'ec2'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR
        run: ./gradlew clean bootJar -x test

      - name: Build Docker Image
        run: docker build -t ocpi_images .

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 148761650284.dkr.ecr.ap-south-1.amazonaws.com

      - name: Get Latest Tag and Create New One
        id: get_version
        run: |
          git fetch --tags 
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E 'ocpi-stack-dev-v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1 || echo "")

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="ocpi-stack-dev-v1.0.0"
          else
            BASE_VERSION=$(echo "$LATEST_TAG" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
            MINOR=$(echo $BASE_VERSION | cut -d. -f2)
            PATCH=$(echo $BASE_VERSION | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="ocpi-stack-dev-v$MAJOR.$MINOR.$NEW_PATCH"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New tag: $NEW_TAG"

      - name: Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $NEW_TAG

      - name: Tag and Push Docker Images
        run: |
          # Build the first image (for the "latest" tag)
          docker build -t ocpi_images:latest .
          docker tag ocpi_images:latest 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest
          docker push 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest

          # Build the second image (for the versioned tag)
          docker build -t ocpi_images:$NEW_TAG .
          docker tag ocpi_images:$NEW_TAG 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:$NEW_TAG
          docker push 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:$NEW_TAG

      - name: Save Docker Image for EC2
        if: inputs.target == 'ec2'
        run: docker save -o ocpi_images.tar ocpi_images

      - name: Transfer Docker Image to EC2
        if: inputs.target == 'ec2'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "ocpi_images.tar"
          target: "~"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to EC2 from ECR
        if: inputs.target == 'ecr'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 148761650284.dkr.ecr.ap-south-1.amazonaws.com
            
            # Pull the latest image BEFORE stopping existing containers
            docker pull 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest
            
            # Stop and remove existing containers
            docker stop emsp cpo || true
            docker rm emsp cpo || true

            # Run EMSP Container
            docker run -d --name emsp -p 9443:9443 --restart always \
              -e "SPRING_PROFILES_ACTIVE=emsp" \
              -e "SCHEMA=emsp" \
              -e "SERVER_PORT=9443" \
              -e "SAAS_URL=https://localhost:9443/hooks" \
              -e "PUBLIC_URL=https://localhost:9443" \
              148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest

            # Run CPO Container
            docker run -d --name cpo -p 8443:8443 --restart always \
              -e "SPRING_PROFILES_ACTIVE=cpo" \
              -e "SCHEMA=cpo" \
              -e "SERVER_PORT=8443" \
              -e "SAAS_URL=https://localhost:8443/hooks" \
              -e "PUBLIC_URL=https://localhost:8443" \
              148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest

      - name: Deploy to EC2 from Local Image
        if: inputs.target == 'ec2'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Load the Docker image before stopping existing containers
            docker load -i ~/ocpi_images.tar
            
            # Stop and remove existing containers
            docker stop emsp cpo || true
            docker rm emsp cpo || true
            
            # Run EMSP Container
            docker run -d --name emsp -p 9443:9443 --restart always \
              -e "SPRING_PROFILES_ACTIVE=emsp" \
              -e "SCHEMA=emsp" \
              -e "SERVER_PORT=9443" \
              -e "SAAS_URL=https://localhost:9443/hooks" \
              -e "PUBLIC_URL=https://localhost:9443" \
              ocpi_images:latest

            # Run CPO Container
            docker run -d --name cpo -p 8443:8443 --restart always \
              -e "SPRING_PROFILES_ACTIVE=cpo" \
              -e "SCHEMA=cpo" \
              -e "SERVER_PORT=8443" \
              -e "SAAS_URL=https://localhost:8443/hooks" \
              -e "PUBLIC_URL=https://localhost:8443" \
              ocpi_images:latest
