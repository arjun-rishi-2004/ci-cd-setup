name: Deploy Spring Boot App to EC2 or ECR in Backup branch

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment Target (ec2 or ecr)'
        required: true
        default: 'ecr'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR
        run: ./gradlew clean bootJar -x test

      - name: Build Docker Image
        run: docker build -t ocpi_images .

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 148761650284.dkr.ecr.ap-south-1.amazonaws.com

      - name: Get Latest Tag and Create New One
        id: get_version
        run: |
          git fetch --tags 
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E 'ocpi-stack-dev-v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1 || echo "")

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="ocpi-stack-dev-v1.0.0"
          else
            BASE_VERSION=$(echo "$LATEST_TAG" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
            MINOR=$(echo $BASE_VERSION | cut -d. -f2)
            PATCH=$(echo $BASE_VERSION | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="ocpi-stack-dev-v$MAJOR.$MINOR.$NEW_PATCH"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New tag: $NEW_TAG"

      - name: Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $NEW_TAG

      - name: Tag and Push Docker Images
        run: |
          # Build & push the latest image
          docker build --no-cache -t ocpi_images:latest --build-arg CACHEBUST=$(date +%s) .
          docker tag ocpi_images:latest 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest
          docker push 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:latest

          # Build & push the versioned image separately
          docker build --no-cache -t ocpi_images:$NEW_TAG --build-arg CACHEBUST=$(date +%s) .
          docker tag ocpi_images:$NEW_TAG 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:$NEW_TAG
          docker push 148761650284.dkr.ecr.ap-south-1.amazonaws.com/ocpi_images:$NEW_TAG

      - name: Cleanup Untagged Images
        run: |
          UNTAGGED_IMAGES=$(aws ecr list-images --repository-name ocpi_images --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)

          if [ "$UNTAGGED_IMAGES" != "[]" ]; then
            aws ecr batch-delete-image --repository-name ocpi_images --image-ids "$UNTAGGED_IMAGES"
          else
            echo "No untagged images found, skipping delete."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Get Latest Task Definition for Service 1
        run: |
          LATEST_TASK_DEF=$(aws ecs list-task-definitions --family ocpi_v2_service_1 --sort DESC --query 'taskDefinitionArns[0]' --output text)
          echo "LATEST_TASK_DEF=$LATEST_TASK_DEF" >> $GITHUB_ENV

      - name: Deploy Service 1 (Different Message)
        run: |
          aws ecs update-service --cluster ocpi_cluster --service Ocpi_v2_service_1 --force-new-deployment \
          --task-definition $LATEST_TASK_DEF

      - name: Get Latest Task Definition for Service 2
        run: |
          LATEST_TASK_DEF=$(aws ecs list-task-definitions --family ocpi_v2_service_2 --sort DESC --query 'taskDefinitionArns[0]' --output text)
          echo "LATEST_TASK_DEF=$LATEST_TASK_DEF" >> $GITHUB_ENV

      - name: Deploy Service 2 (Different Message)
        run: |
          aws ecs update-service --cluster ocpi_cluster --service Ocpi_v2_service_2 --force-new-deployment \
          --task-definition $LATEST_TASK_DEF
